{
  "name": "statsd",
  "description": "A simple, lightweight network daemon to collect metrics over UDP",
  "author": {
    "name": "Etsy"
  },
  "scripts": {
    "test": "./run_tests.sh",
    "start": "node stats.js config.js",
    "install-windows-service": "node_modules\\.bin\\winser -i",
    "uninstall-windows-service": "node_modules\\.bin\\winser -r"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/etsy/statsd.git"
  },
  "version": "0.6.0",
  "dependencies": {
    "node-syslog": "1.1.3",
    "winser": "=0.0.11"
  },
  "devDependencies": {
    "nodeunit": "0.6.x",
    "async": "0.1.x",
    "underscore": "1.2.x",
    "temp": "0.4.x"
  },
  "optionalDependencies": {
    "node-syslog": "1.1.3",
    "winser": "=0.0.11"
  },
  "engines": {
    "node": ">=0.4"
  },
  "bin": {
    "statsd": "./bin/statsd"
  },
  "readme": "StatsD [![Build Status](https://travis-ci.org/etsy/statsd.png?branch=backends-as-packages)](https://travis-ci.org/etsy/statsd)\n======\n\nA network daemon that runs on the [Node.js][node] platform and\nlistens for statistics, like counters and timers, sent over [UDP][udp]\nand sends aggregates to one or more pluggable backend services (e.g.,\n[Graphite][graphite]).\n\nWe ([Etsy][etsy]) [blogged][blog post] about how it works and why we created it.\n\nInspiration\n-----------\n\nStatsD was inspired (heavily) by the project (of the same name) at Flickr.\nHere's a post where Cal Henderson described it in depth:\n[Counting and timing](http://code.flickr.com/blog/2008/10/27/counting-timing/).\nCal re-released the code recently:\n[Perl StatsD](https://github.com/iamcal/Flickr-StatsD)\n\nKey Concepts\n--------\n\n* *buckets*\n  Each stat is in its own \"bucket\". They are not predefined anywhere. Buckets\ncan be named anything that will translate to Graphite (periods make folders,\netc)\n\n* *values*\n  Each stat will have a value. How it is interpreted depends on modifiers. In\ngeneral values should be integer.\n\n* *flush*\n  After the flush interval timeout (defined by `config.flushInterval`,\n  default 10 seconds), stats are aggregated and sent to an upstream backend service.\n\n\nInstallation and Configuration\n------------------------------\n\n * Install node.js\n * Clone the project\n * Create a config file from exampleConfig.js and put it somewhere\n * Start the Daemon:\n\n    node stats.js /path/to/config\n\nMore Specific Topics\n--------\n* [Metric Types](https://github.com/etsy/statsd/blob/master/docs/metric_types.md)\n* [Graphite Integration](https://github.com/etsy/statsd/blob/master/docs/graphite.md)\n* [Supported Backends](https://github.com/etsy/statsd/blob/master/docs/backend.md)\n* [Admin TCP Interface](https://github.com/etsy/statsd/blob/master/docs/admin_interface.md)\n* [Backend Interface](https://github.com/etsy/statsd/blob/master/docs/backend_interface.md)\n* [Metric Namespacing](https://github.com/etsy/statsd/blob/master/docs/namespacing.md)\n\n\nDebugging\n---------\n\nThere are additional config variables available for debugging:\n\n* `debug` - log exceptions and print out more diagnostic info\n* `dumpMessages` - print debug info on incoming messages\n\nFor more information, check the `exampleConfig.js`.\n\n\nTests\n-----\n\nA test framework has been added using node-unit and some custom code to start\nand manipulate statsd. Please add tests under test/ for any new features or bug\nfixes encountered. Testing a live server can be tricky, attempts were made to\neliminate race conditions but it may be possible to encounter a stuck state. If\ndoing dev work, a `killall node` will kill any stray test servers in the\nbackground (don't do this on a production machine!).\n\nTests can be executed with `./run_tests.sh`.\n\n\nMeta\n---------\n- IRC channel: `#statsd` on freenode\n- Mailing list: `statsd@librelist.com`\n\n\nContribute\n---------------------\n\nYou're interested in contributing to StatsD? *AWESOME*. Here are the basic steps:\n\nfork StatsD from here: http://github.com/etsy/statsd\n\n1. Clone your fork\n2. Hack away\n3. If you are adding new functionality, document it in the README\n4. If necessary, rebase your commits into logical chunks, without errors\n5. Verfiy your code by running the test suite, and adding additional tests if able.\n6. Push the branch up to GitHub\n7. Send a pull request to the etsy/statsd project.\n\nWe'll do our best to get your changes in!\n\n[graphite]: http://graphite.wikidot.com\n[etsy]: http://www.etsy.com\n[blog post]: http://codeascraft.etsy.com/2011/02/15/measure-anything-measure-everything/\n[node]: http://nodejs.org\n[nodemods]: http://nodejs.org/api/modules.html\n[udp]: http://en.wikipedia.org/wiki/User_Datagram_Protocol\n\n\nContributors\n-----------------\n\nIn lieu of a list of contributors, check out the commit history for the project:\nhttps://github.com/etsy/statsd/graphs/contributors\n",
  "readmeFilename": "README.md",
  "_id": "statsd@0.6.0",
  "_from": "statsD"
}
